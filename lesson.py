import telebot
import threading
import datetime as dt
from time import sleep
import requests
from config import *    #—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —É—á–∏—Ç–µ–ª—è, —Ç–æ–∫–µ–Ω –±–æ—Ç–∞, –º–æ–π –∞–π–¥–∏, —Å–ø–∏—Å–æ–∫ –∞–π–¥–∏ –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è, —á—Å, –∞–π–¥–∏ –º–µ—Å—Ç —Ç—Ä–µ–≤–æ–≥, –∞–ø–∏ —Ç—Ä–µ–≤–æ–≥

bot = telebot.TeleBot(botToken)

eightLessonWeekday = [1]                            #–¥–µ–Ω—å, –∫–æ–≥–¥–∞ 8 —É—Ä–æ–∫–æ–≤: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
noLessonsText = "—É—Ä–æ–∫–æ–≤ –Ω–µ—Ç"                        #—á—Ç–æ –ø–∏—à–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤
alert = False                                       #–µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–≤–æ–≥–∞
tr = threading.Thread()                             #–ø–æ—Ç–æ–∫ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥

@bot.message_handler(commands=["lesson"])               #–æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
def getLesson(message):                                   
    global tr
    chat = message.chat.id

    if chat != chatMain_id and message.from_user.id != botOwner_id:                     #—á—Ç–æ–±—ã —Å—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –ø–ª–æ—Ö–∏–µ —Ä—É–∫–∏
        bot.send_message(chat, "–ë–æ—Ç–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —à–∫–æ–ª—å–Ω–æ–π –≥—Ä—É–ø–ø–µ")
        return

    if message.from_user.id in blackList:           #—á—Å –¥–ª—è –ø–ª–æ—Ö–∏—Ö –ª—é–¥–µ–π
        bot.send_message(chat, "–ø–æ—à—ë–ª –≤ –∂–æ–ø—É")
        return

    zone = dt.timezone(dt.timedelta(hours=3))       #–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ö–∏–µ–≤—É
    time = dt.datetime.now(zone)
    weekday = time.isoweekday()

    if not tr.is_alive():                           #–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–≤–æ–≥, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        tr = threading.Thread(target=checkAlerts, kwargs={'bot': bot, 'chat': chat, 'zone': zone}, name="checking")
        tr.start()

    if weekday in range(6):                                                             #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—É–¥–Ω–∏
        lesson, endTime, lessonTime = getLessonNum(time)

        if lesson > 8 or (lesson > 7 and not weekday in eightLessonWeekday):            #—É—Ä–æ–∫ –Ω–µ –±–æ–ª—å—à–µ 7 –∏–ª–∏ 8 –≤ –¥–µ–Ω—å —Å 8 —É—Ä–æ–∫–∞–º–∏
            bot.send_message(chat, noLessonsText)
        elif lesson > 0:                                                                #—É—Ä–æ–∫
            mes = ""

            if alert: mes += "üö®–¢—Ä–µ–≤–æ–≥–∞!üö®"                                            #–µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–≤–æ–≥–∞
            mes += str(lesson) + ". "                                                   #–Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
            mes += shedule[weekday][lesson] + "\n"                                      #—Å–∞–º —É—Ä–æ–∫

            startTime = dt.datetime.strptime(str(endTime - lessonTime), "%H:%M:%S")     #–≤—Ä–µ–º—è —É—Ä–æ–∫–∞
            endTime = dt.datetime.strptime(str(endTime), "%H:%M:%S")
            mes += f"{startTime.strftime('%H:%M')} - {endTime.strftime('%H:%M')} \n"

            mes += teachers[shedule[weekday][lesson].split(" ")[0]]                     #—É—á–∏—Ç–µ–ª—å

            bot.send_message(chat, mes)
    else:
        bot.send_message(chat, noLessonsText)

@bot.message_handler(commands=["changeTime"])                   #–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def changeTime(message):                                        
    chat = message.chat.id
    member = bot.get_chat_member(chat, message.from_user.id)
    timesRows = message.text.split("\n")[1:]                    #8 —Å—Ç—Ä–æ–∫ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã

    #–∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞, —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. —Å—Ç—Ä–æ–∫ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 8
    if member.user.id != botOwner_id and member.status != "creator" and member.status != "administrator": 
        bot.send_message(chat, "–ú–µ–Ω—è—Ç—å –≤—Ä–µ–º—è –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        return
    elif len(timesRows) != 8:                                                               
        bot.send_message(chat, "–í—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 8\n–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è:\n/changeTime\n8:00 9:00\n9:10 10:00\n..")
        return

    for i in range(8):                                      #–∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
       times = timesRows[i].split(' ')                                                              #–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞     
       length = dt.datetime.strptime(times[1], "%H:%M") - dt.datetime.strptime(times[0], "%H:%M")   #–≤—Ä–µ–º—è —É—Ä–æ–∫–∞

       hoursMinutes = times[1].split(':')                                                           #–æ—Ç–¥–µ–ª—å–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
       timeTable[i+1] = [dt.timedelta(hours=int(hoursMinutes[0]), minutes=int(hoursMinutes[1])), dt.timedelta(minutes=length.seconds//60)]
    bot.send_message(chat, "–ò–∑–º–µ–Ω–µ–Ω–æ") 



def checkAlerts(bot, chat, zone):       #–ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –≤ –æ–¥–Ω–æ–º –∑–∞–¥–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ —Ç—Ä–µ–≤–æ–≥–∞
    global alert

    while True:                         #—Ç—Ä–µ–≤–æ–≥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ, –∫–∞–∂–¥—ã–µ 7 —Å–µ–∫—É–Ω–¥
        regionInfos = []
        check = lambda x: len(x) != 0
        
        for id in region_ids:
            try:                        #–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—Ç–∞ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–≤–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø—É—Å—Ç–æ–π, –µ—Å–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏ –Ω–µ—Ç
                regionInfos.append(requests.get(sirenAPI+str(id)).json()[0]['activeAlerts'])
            except Exception as e:
                print(e)

        time = dt.datetime.now(zone)
        delta = dt.timedelta(hours= time.hour, minutes=time.minute)
        alert_ids = list(filter(check, regionInfos))                            #—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—É—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–æ–≤ (–º–µ—Å—Ç –±–µ–∑ —Ç—Ä–µ–≤–æ–≥–∏)
        if len(alert_ids) != 0 and not alert and delta < timeTable[8][0]:       #–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–æ —Ç—Ä–µ–≤–æ–≥—É –¥–æ –∫–æ–Ω—Ü–∞ —É—á–µ–±—ã
            bot.send_message(chat, "üö®–¢—Ä–µ–≤–æ–≥–∞üö®")
            alert = True
        if len(alert_ids) == 0 and alert:
            mentionAll(bot, chat)
            alert = False
        sleep(7)

def mentionAll(bot, chat):              #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    text = "–û—Ç–±–æ–π —Ç—Ä–µ–≤–æ–≥–∏"
    mes = ""
    for i in range(len(mention)):
        if i < len(text):
            mes += f"[{text[i]}](tg://user?id={mention[i]})"    #–≤ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–∏–Ω–≥–∞
        else:                                                               
            mes += f"[‚úÖ](tg://user?id={mention[i]})"           #–µ—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –±—É–∫–≤, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ —Å–º–∞–π–ª–∏–∫
    bot.send_message(chat, mes, parse_mode="MarkdownV2")


def getLessonNum(time):                                             #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞
    td = dt.timedelta(hours=time.hour, minutes=time.minute)
    for les in timeTable:
        #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ (+–µ–≥–æ –≤—Ä–µ–º—è –∏ –¥–ª–∏–Ω–∞), –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å (–∏ –∑–∞ —á–∞—Å –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–∫–∞)
        if td < timeTable[les][0] and td > timeTable[min(timeTable.keys())][0] - (timeTable[1][1]+dt.timedelta(minutes=60)):
            return les, timeTable[les][0], timeTable[les][1]        #–∫—Ä–æ–º–µ —É—Ä–æ–∫–∞ –µ—â–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤—Ä–µ–º—è –µ–≥–æ –∫–æ–Ω—Ü–∞ –∏ –¥–ª–∏–Ω–∞
    return 9, 0, 0


def poll():         #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫
    try:
        bot.polling(none_stop=True, interval=0)
    except requests.exceptions.ReadTimeout:
        print("timeout")
        poll()
    except requests.exceptions.ProxyError:
        print("proxy")
        poll()
    except requests.exceptions.ConnectionError:
        print("connection")
        poll()
poll()
